Fowler/Noll/Vo hash


#========================#
# Source Code Repository #
#========================#

See:
 	http://reality.sgi.com/chongo/tech/comp/fnv/index.html

for the most up to date copy of this code and the FNV hash home page.

Comments, questions, bug fixes and suggestions welcome at:

    chongo_fnv@prime.engr.sgi.com


#==================#
# FNV hash utility #
#==================#

Two hash utilities (32 bit and 64 bit) are provided:

	fnv_32 [-s arg] [arg ...]
	fnv_64 [-s arg] [arg ...]
	fnv1_32 [-s arg] [arg ...]
	fnv1_64 [-s arg] [arg ...]

	-s	hash arg as a string (ignoring terminating NUL bytes)
	arg	string (if -s was given) or filename (default stdin)

as examples of how to use the FNV hash library.

Also for those who do not like to type the _, the same tools exist:

	fnv32 [-s arg] [arg ...]
	fnv64 [-s arg] [arg ...]
	fnv132 [-s arg] [arg ...]
	fnv164 [-s arg] [arg ...]

	-s	hash arg as a string (ignoring terminating NUL bytes)
	arg	string (if -s was given) or filename (default stdin)


#==================#
# FNV hash library #
#==================#

The libfnv.a library implements both a 32 bit and a 64 bit FNV hash
on collections of bytes, a NUL terminated strings or on an open file
descriptor.

Here is the 32 bit FNV hash:

	fnv32 fnv_32_buf(char *buf, int len, fnv32 *hval);	/* byte buf */
	fnv32 fnv_32_str(char *string, fnv32 *hval);		/* string */
	fnv32 fnv_32_fd(int fd, fnv32 *hval);			/* open file */
or:
	fnv32 fnv_32_buf(char *buf, int len, NULL);		/* byte buf */
	fnv32 fnv_32_str(char *string, NULL);			/* string */
	fnv32 fnv_32_fd(int fd, NULL);				/* open file */

Here is the 64 bit FNV hash:

	fnv64 fnv_64_buf(char *buf, int len, fnv64 *hval);	/* byte buf */
	fnv64 fnv_64_str(char *string, fnv64 *hval);		/* string */
	fnv64 fnv_64_fd(int fd, fnv64 *hval);			/* open file */
or:
	fnv64 fnv_64_buf(char *buf, int len, NULL);		/* byte buf */
	fnv64 fnv_64_str(char *string, NULL);			/* string */
	fnv64 fnv_64_fd(int fd, NULL);				/* open file */

If hval is NULL, then only the FNV hash of the first arg (buffer or string)
will be returned.  If hval is non-NULL, then its value will be used as
an initial FNV hash value and on return it will be updated with the
returned value.  For example:

	fnv64 hash_val;

	hash_val = fnv_64_str("a string", NULL);
	(void) fnv_64_str("more string", &hash_val);

produces the same final hash value as:

	hash_val = fnv_64_str("a stringmore string", NULL);

NOTE: If you system has a 64 bit 'unsigned long long' data type, then
fnv64 will be an unsigned long long; otherwise fnv64 will be a structure
containing 2 unsigned long's.


#====================#
# FNV-1 hash library #
#====================#

NOTE: The FNV-1 hash function has not been fully tested and may be subject
      to change in the near future. - XXX

The libfnv.a library implements both a 32 bit and a 64 bit FNV-1 hash
on collections of bytes, a NUL terminated strings or on an open file
descriptor.  The FNV-1 hash, while slightly slower will not fix on a
zero hash value and remain there while it processes additional 0 bytes.

The interface to FNV-1 is the same as FNV except that the function
names start with fnv1 instead of just fnv:

	fnv32 fnv1_32_buf(char *buf, int len, fnv32 *hval);	/* byte buf */
	fnv32 fnv1_32_str(char *string, fnv32 *hval);		/* string */
	fnv32 fnv1_32_fd(int fd, fnv32 *hval);			/* open file */
or:
	fnv32 fnv1_32_buf(char *buf, int len, NULL);		/* byte buf */
	fnv32 fnv1_32_str(char *string, NULL);			/* string */
	fnv32 fnv1_32_fd(int fd, NULL);				/* open file */

Here is the 64 bit FNV hash:

	fnv64 fnv1_64_buf(char *buf, int len, fnv64 *hval);	/* byte buf */
	fnv64 fnv1_64_str(char *string, fnv64 *hval);		/* string */
	fnv64 fnv1_64_fd(int fd, fnv64 *hval);			/* open file */
or:
	fnv64 fnv1_64_buf(char *buf, int len, NULL);		/* byte buf */
	fnv64 fnv1_64_str(char *string, NULL);			/* string */
	fnv64 fnv1_64_fd(int fd, NULL);				/* open file */

=-=

chongo <Landon Curt Noll> /\oo/\
http://reality.sgi.com/chongo
chongo_fnv@prime.engr.sgi.com

Share and Enjoy!
