Fowler/Noll/Vo hash

See:
 	http://reality.sgi.com/chongo/tech/comp/fnv/index.html

for the most up to date copy of this code and the FNV hash home page.

=-=

This soource implements both a 32 bit and a 64 bit FNV hash on collections
of bytes or a NUL terminated strings.

Here is the 32 bit FNV hash:

	fnv32 fnv32_buf(char *buf, int len, fnv32 *hval);
	fnv32 fnv32_str(char *string, fnv32 *hval);
	fnv32 fnv32_fd(int fd, fnv32 *hval);
or:
	fnv32 fnv32_buf(char *buf, int len, NULL);
	fnv32 fnv32_str(char *string, NULL);
	fnv32 fnv32_fd(int fd, NULL);

Here is the 64 bit FNV hash:

	fnv64 fnv64_buf(char *buf, int len, fnv64 *hval);
	fnv64 fnv64_str(char *string, fnv64 *hval);
	fnv64 fnv64_fd(int fd, fnv64 *hval);
or:
	fnv64 fnv64_buf(char *buf, int len, NULL);
	fnv64 fnv64_str(char *string, NULL);
	fnv64 fnv64_fd(int fd, NULL);

If hval is NULL, then only the FNV hash of the first arg (buffer or string)
will be returned.  If hval is non-NULL, then its value will be used as
an initial FNV hash value and on return it will be updated with the
returned value.  For example:

	fnv64 hash_val;

	hash_val = fnv64_str("a string", NULL);
	(void) fnv64_str("more string", &hash_val);

produces the same final hash value as:

	hash_val = fnv64_str("a stringmore string", NULL);

NOTE: If you system has a 64 bit 'unsigned long long' data type, then
fnv64 will be an unsigned long long; otherwise fnv64 will be a structure
containing 2 unsigned long's.

chongo <Landon Curt Noll> /\oo/\
http://reality.sgi.com/chongo
chongo_fnv@prime.engr.sgi.com

Share and Enjoy!
