Fowler/Noll/Vo hash


#========================#
# Source Code Repository #
#========================#

See:
 	http://reality.sgi.com/chongo/tech/comp/fnv/index.html

for the most up to date copy of this code and the FNV hash home page.

Comments, questions, bug fixes and suggestions welcome at:

    chongo_fnv@prime.engr.sgi.com


#====================#
# FNV-1 hash utility #
#====================#

This is the FNV-1 algorithm with a non-0 offset basis which is very
similar to the historic FNV-0 algorithm and identical in speed.

Two hash utilities (32 bit and 64 bit) are provided:

	fnv1_32 [-b bcnt] [-m [-v]] [-s arg] [arg ...]
	fnv1_64 [-b bcnt] [-m [-v]] [-s arg] [arg ...]
or:
	fnv132 [-b bcnt] [-m [-v]] [-s arg] [arg ...]
	fnv164 [-b bcnt] [-m [-v]] [-s arg] [arg ...]

	-b bcnt	  mask off all but the lower bcnt bits (default: 32)
 	-m	  multiple hashes, one per line for each arg
	-s	  hash arg as a string (ignoring terminating NUL bytes)
 	-v	  verbose mode, print arg after hash (implies -m)
	arg	  string (if -s was given) or filename (default stdin)

as examples of how to use the FNV hash library.  For those who do
not like _'s, the same tools exist without the _ are provided.  :-)


#====================#
# FNV-1 hash library #
#====================#

The libfnv.a library implements both a 32 bit and a 64 bit FNV-1 hash
on collections of bytes, a NUL terminated strings or on an open file
descriptor.  The FNV-1 hash, while slightly slower will not fix on a
zero hash value and remain there while it processes additional 0 bytes.

The interface to FNV-1 is the same as FNV except that the function
names start with fnv1 instead of just fnv:

	fnv32 fnv1_32_buf(char *buf, int len, fnv32 *hval);	/* byte buf */
	fnv32 fnv1_32_str(char *string, fnv32 *hval);		/* string */
	fnv32 fnv1_32_fd(int fd, fnv32 *hval);			/* open file */
or:
	fnv32 fnv1_32_buf(char *buf, int len, NULL);		/* byte buf */
	fnv32 fnv1_32_str(char *string, NULL);			/* string */
	fnv32 fnv1_32_fd(int fd, NULL);				/* open file */

Here is the 64 bit FNV hash:

	fnv64 fnv1_64_buf(char *buf, int len, fnv64 *hval);	/* byte buf */
	fnv64 fnv1_64_str(char *string, fnv64 *hval);		/* string */
	fnv64 fnv1_64_fd(int fd, fnv64 *hval);			/* open file */
or:
	fnv64 fnv1_64_buf(char *buf, int len, NULL);		/* byte buf */
	fnv64 fnv1_64_str(char *string, NULL);			/* string */
	fnv64 fnv1_64_fd(int fd, NULL);				/* open file */

=-=

chongo <Landon Curt Noll> /\oo/\
http://reality.sgi.com/chongo
chongo_fnv@prime.engr.sgi.com

Share and Enjoy!
