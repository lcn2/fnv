Fowler/Noll/Vo hash

See:
	http://reality.sgi.com/chongo/fnv/index.html

for the most up to date copy of this code and the FV hash home page.

These functions implement the algorithm and contain the magic
primes for very good hashing.

=-=

Here are sample codes for the Fowler/Noll/Vo hash:

	h32.c	32 bit (Fowler/Noll/Vo)
	h64.c	64 bit (Fowler/Noll/Vo64)

Both these files implement a function called hash_buf.  Here is the
interface to the 32 bit version:

	typedef unsigned long hash32;
	hash hash32_buf(char *buf, int len, hash32 *hval)

It is you simple pointer, length returning a 32 bit value hash.

The 64 bit version in identical:

	/*
	 * 64 bit hash value
	 */
	#if defined(HAVE_64BIT_LONG_LONG)
	typedef unsigned long long hash64;
	#else
	struct s_hash64 {
	    unsigned long w32[2];
	};
	typedef struct s_hash64 hash64;
	#endif

	hash64 hash32_buf(char *buf, int len, hash64 *hval)

However if you system does have a 64 bit 'long long' data type, you should
define -DHAVE_64BIT_LONG_LONG.  The Makefile should build a longlong.h
for you which will have HAVE_64BIT_LONG_LONG define or undefined.

chongo <Landon Curt Noll> /\oo/\
chongo_fnv@prime.engr.sgi.com

Share and Enjoy!
