From gsf@research.att.com  Wed Oct 27 05:58:24 1999
Received: from cthulhu.engr.sgi.com (cthulhu.engr.sgi.com [192.26.80.2]) by prime.engr.sgi.com (980427.SGI.8.8.8/980728.SGI.AUTOCF) via ESMTP id FAA14119 for <chongo@prime.engr.sgi.com>; Wed, 27 Oct 1999 05:58:23 -0700 (PDT)
Received: from sgi.com (sgi.engr.sgi.com [192.26.80.37])
	by cthulhu.engr.sgi.com (980427.SGI.8.8.8/970903.SGI.AUTOCF)
	via ESMTP id FAA35969
	for <chongo@engr.sgi.com>;
	Wed, 27 Oct 1999 05:58:22 -0700 (PDT)
	mail_from (gsf@research.att.com)
Received: from mail-blue.research.att.com (mail-blue.research.att.com [135.207.30.102]) 
	by sgi.com (980305.SGI.8.8.8-aspam-6.2/980304.SGI-aspam:
       SGI does not authorize the use of its proprietary
       systems or networks for unsolicited or bulk email
       from the Internet.) 
	via ESMTP id FAA5267418
	for <chongo@sgi.com>; Wed, 27 Oct 1999 05:58:21 -0700 (PDT)
	mail_from (gsf@research.att.com)
Received: from raptor.research.att.com (raptor.research.att.com [135.207.23.32])
	by mail-blue.research.att.com (Postfix) with ESMTP id 9049D4CE1C
	for <chongo@sgi.com>; Wed, 27 Oct 1999 08:58:16 -0400 (EDT)
Received: (from gsf@localhost)
	by raptor.research.att.com (980427.SGI.8.8.8/8.8.7) id IAA79139;
	Wed, 27 Oct 1999 08:58:16 -0400 (EDT)
Date: Wed, 27 Oct 1999 08:58:16 -0400 (EDT)
From: Glenn Fowler <gsf@research.att.com>
Message-Id: <199910271258.IAA79139@raptor.research.att.com>
Organization: AT&T Labs Research
X-Mailer: mailx (AT&T/BSD) 9.8 1999-07-17
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: chongo@sgi.com, gsf@research.att.com, kpv@research.att.com
Subject: Re: FNV hash
Status: ORr


this is great and brightened my morning
although slower than the sun/m$ de-facto standard process
(delivering green code with a two-by-four)
this is much more satisfying
now we have a p.s. to our 1999 I-am-great forms

two comments

the 2nd and 3rd paragraphs on the web page have a few sentences in common

and here's an alternative to the hval pointer arg
this avoids the singularity anywhere in the data
(you could be unlucky and hit val==0 and 0 octets through EOF)
also with x/openish types
and an unsigned char sweep so the results are the same on all arch's
so user code always initializes val to 0

	#define FNV_32_INIT	0x811c9dc5
	#define FNV_32_FACTOR	0x01000193

	Fnv32_t
	fnv1_32_buf(void* buf, size_t len, Fnv32_t val)
	{
		unsigned char*	bp = (unsigned char*)buf;
		unsigned char*	be = bp + len;

		if (val == 0)
			val = FNV_32_INIT;
		while (bp < be)
		{
			val *= (Fnv32_t)FNV_32_FACTOR;
			val ^= (Fnv32_t)*bp++;
		}
		return val;
	}

> Remember those hash functions we were proposing as a replacement of the
> cksum algorithm back in the days of POSIX P1003.2?  Well even though
> the committee picked that CRC algorithm, the reviewer comments gained
> a life of their own.

From chongo Thu Oct 28 14:39:39 1999
From: chongo@sgi.com (Landon Curt Noll)
Message-Id: <9910281439.ZM22053@prime.engr.sgi.com>
Date: Thu, 28 Oct 1999 14:39:39 -0700
Return-Receipt-To: chongo@sgi.com
In-Reply-To: Glenn Fowler <gsf@research.att.com>
        "Re: FNV hash" (Oct 27,  8:58)
References: <199910271258.IAA79139@raptor.research.att.com>
Reply-To: chongo@sgi.com
X-also-known-as: chongo@toad.com, noll@toad.com, noll@sgi.com
X-Mailer: Z-Mail-SGI (3.2S.3 08feb96 MediaMail)
To: Glenn Fowler <gsf@research.att.com>
Subject: Re: FNV hash
Cc: kpv@research.att.com
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Status: ORS

On 27-Oct-99  8:58, Glenn Fowler wrote:
> Subject: Re: FNV hash
> 
> 	#define FNV_32_INIT	0x811c9dc5
> 	#define FNV_32_FACTOR	0x01000193
> 
> 	Fnv32_t
> 	fnv1_32_buf(void* buf, size_t len, Fnv32_t val)
> 	{
> 		unsigned char*	bp = (unsigned char*)buf;
> 		unsigned char*	be = bp + len;
> 
> 		if (val == 0)
> 			val = FNV_32_INIT;
> 		while (bp < be)
> 		{
> 			val *= (Fnv32_t)FNV_32_FACTOR;
> 			val ^= (Fnv32_t)*bp++;
> 		}
> 		return val;
> 	}

I like this form ... it is a better interface.   I started to recode
to it, making the code much cleaner and tighter.  But then I realized that
is introduces a subtile bug.  Consider:

	hashval = fnv1_32_buf(magic_buffer, magic_length, 0);

Where ``magic_buffer'' is a collection of octets such that the FNV-1 hash
of the first ``magic_length'' octets is 0.

Then the next call:

	hashval = fnv1_32_buf(magic_buffer+magic_length, more_length, hashval);

would not produce the same value as:

	hashval = fnv1_32_buf(magic_buffer, magic_length+more_length, 0);

One 'fix', using your proposed interface, would be to put a test for 0 hash
inside the loop which would slow down the speed.  But then you might as well
use FNV-2 ...

It seems to me that the interface has to be told ``this is the first call, 
it is OK to replace 0 with the initial basis hashval'' by some means other 
than passing in a 0 hash value.  

One could pass in a ``first call flag'' argument ...

Better still one could have a:

	Fnv32_t
	fnv1_32_buf(void *buf, size_t len)

as the first call function and:

	Fnv32_t
	fnv1_32_morebuf(void *buf, size_t len, Fnv32_t prev_val)

to process more data.

Comments?

chongo <> /\oo/\

-- 
{chongo,noll}@{sgi,toad}.com

From gsf@research.att.com  Thu Oct 28 18:15:07 1999
Received: from cthulhu.engr.sgi.com (cthulhu.engr.sgi.com [192.26.80.2]) by prime.engr.sgi.com (980427.SGI.8.8.8/980728.SGI.AUTOCF) via ESMTP id SAA22661 for <chongo@prime.engr.sgi.com>; Thu, 28 Oct 1999 18:15:07 -0700 (PDT)
Received: from sgi.com (sgi.engr.sgi.com [192.26.80.37])
	by cthulhu.engr.sgi.com (980427.SGI.8.8.8/970903.SGI.AUTOCF)
	via ESMTP id SAA65971
	for <chongo@engr.sgi.com>;
	Thu, 28 Oct 1999 18:15:06 -0700 (PDT)
	mail_from (gsf@research.att.com)
Received: from mail-green.research.att.com (H-135-207-30-103.research.att.com [135.207.30.103]) 
	by sgi.com (980305.SGI.8.8.8-aspam-6.2/980304.SGI-aspam:
       SGI does not authorize the use of its proprietary
       systems or networks for unsolicited or bulk email
       from the Internet.) 
	via ESMTP id SAA5952757
	for <chongo@sgi.com>; Thu, 28 Oct 1999 18:15:04 -0700 (PDT)
	mail_from (gsf@research.att.com)
Received: from raptor.research.att.com (raptor.research.att.com [135.207.23.32])
	by mail-green.research.att.com (Postfix) with ESMTP id 9BDA51E045
	for <chongo@sgi.com>; Thu, 28 Oct 1999 21:14:58 -0400 (EDT)
Received: (from gsf@localhost)
	by raptor.research.att.com (980427.SGI.8.8.8/8.8.7) id VAA55783
	for chongo@sgi.com; Thu, 28 Oct 1999 21:14:58 -0400 (EDT)
Date: Thu, 28 Oct 1999 21:14:58 -0400 (EDT)
From: Glenn Fowler <gsf@research.att.com>
Message-Id: <199910290114.VAA55783@raptor.research.att.com>
Organization: AT&T Labs Research
X-Mailer: mailx (AT&T/BSD) 9.8 1999-07-17
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: chongo@sgi.com
Subject: Re: FNV hash
Status: ORS


it could be
	#define FNV_64_INIT	fnv_64_init
to fit with the 32 bit case

> On 28-Oct-99 16:38, Landon Curt Noll wrote:
> > Subject: Re: FNV hash
> > On 28-Oct-99 18:07, Glenn Fowler wrote:
> > > Subject: Re: FNV hash
> > 
> > I assume you mean:
> > 
> > 	#include "fnv1.h"
> > 	...
> > 	hashval = fnv_32_buf(buf, len, FNV_32_INIT);
> > 	...
> > 	hashval = fnv_32_buf(buf, len, hashval);
>
> Actually there is a mess with dealing with the 64 bit case.  I think a
>
>     extern const Fnv64_t fnv_64_init;
>
> will have to be declared in "fnv1.h".  This is because the 64 bit
> initial basis on machines without a 'unsigned long long' type is
> a structure ...
>
> So it would be:
>
> 	#include "fnv1.h"	/* declares extern const Fnv64_t fnv_64_init */
> 	...
> 	hashval = fnv_64_buf(buf, len, fnv_64_init);
> 	...
> 	hashval = fnv_64_buf(more_buf, more_len, hashval);
>
> chongo <> /\oo/\
>
> -- 
> {chongo,noll}@{sgi,toad}.com
>

